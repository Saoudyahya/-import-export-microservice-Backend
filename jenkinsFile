pipeline {
    agent any
    
    environment {
        COMPOSE_FILE = 'docker-compose.yml'
        DOCKERHUB_CREDENTIALS = credentials('iyminds-dockerhub')
        DOCKERHUB_REPO = 'iyminds/import-export-microservice'
        IMAGE_TAG = 'latest'
        GITHUB_CREDENTIALS = credentials('jenkins-import-export') // Replace with your GitHub PAT credentials ID
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout code from the repository using GitHub PAT
                script {
                    withCredentials([string(credentialsId: env.GITHUB_CREDENTIALS, variable: 'GITHUB_PAT')]) {
                        sh """
                            git config --global credential.helper 'cache --timeout=3600'
                            git config --global url.https://oauth2:$GITHUB_PAT@github.com/.insteadOf https://github.com/
                            git clone https://github.com/Saoudyahya/import-export-microservice-Backend.git
                        """
                    }
                }
            }
        }
        
        stage('Build Spring Boot App') {
            steps {
                // Build the Spring Boot application
                sh './mvnw clean package -DskipTests'
            }
        }
        
        stage('Build Docker Images') {
            steps {
                // Build Docker images using Docker Compose
                sh 'docker-compose build'
            }
        }
        
        stage('Run Containers') {
            steps {
                // Run Docker containers using Docker Compose
                sh 'docker-compose up -d'
            }
        }
        
        stage('Integration Tests') {
            steps {
                // Run integration tests, if any
                sh './mvnw verify'
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                script {
                    // Get Docker Hub credentials
                    withCredentials([usernamePassword(credentialsId: env.DOCKERHUB_CREDENTIALS, usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        // Log in to Docker Hub
                        sh 'echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin'
                        
                        // Tag the built image
                        sh "docker tag spring-boot-app:latest ${env.DOCKERHUB_REPO}:${env.IMAGE_TAG}"
                        
                        // Push the image to Docker Hub
                        sh "docker push ${env.DOCKERHUB_REPO}:${env.IMAGE_TAG}"
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up Docker containers
            sh 'docker-compose down'
        }
        success {
            echo 'Deployment was successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
